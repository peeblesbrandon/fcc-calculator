{"version":3,"sources":["components/App/App.js","components/Display/Display.js","components/Buttons/Buttons.js","serviceWorker.js","index.js"],"names":["nums","ops","ids","7","8","9","4","5","6","1","2","3","0","App","props","state","lastPressed","undefined","calc","operation","handleButton","bind","e","this","innerText","target","setState","evaluated","eval","splitted","split","last","slice","includes","lastNumberIdx","reverse","findIndex","char","length","id","className","displayMsg","React","Component","Display","colSpan","String","replace","Buttons","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.345f337d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Display from '../Display/Display';\nimport Buttons from '../Buttons/Buttons';\n\nconst nums = [7, 8, 9, 4, 5, 6, 1, 2, 3, 0];\nconst ops = ['/', '*', '-', '+'];\nconst ids = {\n    7: 'seven',\n    8: 'eight',\n    9: 'nine',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    0: 'zero',\n    '/': 'divide',\n    '*': 'multiply',\n    '-': 'subtract',\n    '+': 'add'\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            lastPressed: undefined,\n            calc: '0',\n            operation: undefined\n        }\n        this.handleButton = this.handleButton.bind(this);\n    }\n\n    handleButton(e) {\n        {\n            const { calc, lastPressed } = this.state;\n            const { innerText } = e.target;\n\n            switch (innerText) {\n                case 'AC': {\n                    this.setState({\n                        calc: '0',\n                    });\n                    break;\n                }\n\n                case '=': {\n                    const evaluated = eval(calc);\n                    this.setState({\n                        calc: evaluated\n                    });\n                    break;\n                }\n\n                case '.': {\n                    const splitted = calc.split(/[\\+\\-\\*\\/]/);\n                    const last = splitted.slice(-1)[0];\n\n                    if (!last.includes('.')) {\n                        this.setState({\n                            calc: calc + '.'\n                        })\n                    }\n\n                    break;\n                }\n\n                default: {\n                    let e = undefined;\n                    if (ops.includes(innerText)) {\n                        if (ops.includes(lastPressed) && innerText !== '-') {\n                            const lastNumberIdx = calc.split('').reverse()\n                                .findIndex(char => char !== ' ' && nums.includes(+char));\n                            e = calc.slice(0, calc.length - lastNumberIdx) + ` ${innerText} `;\n                        } else {\n                            e = `${calc} ${innerText} `;\n                        }\n                    } else {\n                        e = (calc === '0') ? innerText : (calc + innerText);\n                    }\n\n                    this.setState({\n                        calc: e\n                    });\n                }\n            }\n\n            this.setState({\n                lastPressed: innerText\n            })\n\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"calculator\" className=\"d-flex flex-column justify-content-center align-items-center\">\n                <Display displayMsg={this.state.calc} />\n                <Buttons handleButton={this.handleButton}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport './Display.css';\n\nclass Display extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <table>\n                <tbody>\n                    <tr>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td id=\"display\" colSpan=\"4\">{String(this.props.displayMsg).replace(/[\\n\\r]+/g, '')}</td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default Display;","import React from 'react';\nimport './Buttons.css';\n\nclass Buttons extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    \n    render () {\n        return (\n            <table>\n                <tbody onClick={this.props.handleButton}>\n                    <tr>\n                        <td id=\"clear\" colSpan=\"2\" className=\"clearBtns\">AC</td>\n                        {/* <td id=\"clear-entry\" className=\"clearBtns\">CE</td> */}\n                        <td></td>\n                        <td id=\"divide\" className=\"operator\">/</td>\n                    </tr>\n                    <tr>\n                        <td id=\"seven\" className=\"number\">7</td>\n                        <td id=\"eight\" className=\"number\">8</td>\n                        <td id=\"nine\" className=\"number\">9</td>\n                        <td id=\"multiply\" className=\"operator\">*</td>\n                    </tr>\n                    <tr>\n                        <td id=\"four\" className=\"number\">4</td>\n                        <td id=\"five\" className=\"number\">5</td>\n                        <td id=\"six\" className=\"number\">6</td>\n                        <td id=\"subtract\" className=\"operator\">-</td>\n                    </tr>\n                    <tr>\n                        <td id=\"one\" className=\"number\">1</td>\n                        <td id=\"two\" className=\"number\">2</td>\n                        <td id=\"three\" className=\"number\">3</td>\n                        <td id=\"add\" className=\"operator\">+</td>\n                    </tr>\n                    <tr>\n                        <td id=\"zero\" colSpan=\"2\" className=\"number\">0</td>\n                        <td id=\"decimal\" className=\"number\">.</td>\n                        <td id=\"equals\" className=\"operator\">=</td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default Buttons;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}